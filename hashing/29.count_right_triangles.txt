Problem Description :

Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in 2D Cartesian plane.

Find and return the number of unordered triplets (i, j, k) such that (A[i], B[i]), (A[j], B[j]) and (A[k], B[k]) form a right-angled triangle with the triangle having one side parallel to the x-axis and one side parallel to the y-axis.

NOTE: The answer may be large so return the answer modulo (109 + 7).

Problem Constraints
1 <= N <= 105
0 <= A[i], B[i] <= 109

Input Format:
The first argument given is an integer array A.
The second argument given is the integer array B.

Output Format:
Return the number of unordered triplets that form a right angled triangle modulo (109 + 7).


Example Input
Input 1:
 A = [1, 1, 2]
 B = [1, 2, 1]
Input 2:
 A = [1, 1, 2, 3, 3]
 B = [1, 2, 1, 2, 1]

Example Output:
Output 1:
 1
Output 2:
 6


Example Explanation
Explanation 1:
 All three points make a right angled triangle. So return 1.
Explanation 2:
 6 triplets which make a right angled triangle are:    (1, 1), (1, 2), (2, 1)
                                                       (1, 1), (3, 1), (1, 2)
                                                       (1, 1), (3, 1), (3, 2)
                                                       (2, 1), (3, 1), (3, 2)
                                                       (1, 1), (1, 2), (3, 2)
                                                       (1, 2), (3, 1), (3, 2)

===========================================================================
function solve(a, b) {
  const n = a.length;
  // stores the frequency of each x coordinate
  const mpx = new Map();
  // stores the frequency of each y coordinate
  const mpy = new Map();
  for (let i = 0; i < n; i++) {
    mpx.set(a[i], (mpx.get(a[i]) || 0) + 1);
    mpy.set(b[i], (mpy.get(b[i]) || 0) + 1);
  }
  let ans = 0;
  const mod = 1000000007;
  for (let i = 0; i < n; i++) {
    // counts the number of triangles that forms a right angle at the i-th point
    // if the point is (x,y) : find how many points are there on x axis (X) and how many points are there on y axis(Y)
    // and so ans is X*Y triangles for that point (x,y)
    // we are subtracting 1 from total count of points on x and y axis bcz we are not taking into consideration the point (x,y)
    ans = (ans + (mpx.get(a[i]) - 1) * (mpy.get(b[i]) - 1)) % mod;
  }
  return ans;
}
// Example usage:
a = [1, 1, 2, 3, 3];
b = [1, 2, 1, 2, 1];
const result = solve(a, b);
console.log(result);


============================================================================================================================================================