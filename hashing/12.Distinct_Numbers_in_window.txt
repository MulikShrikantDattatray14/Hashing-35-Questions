Problem Description:-

You are given an array of N integers, A1, A2 ,..., AN and an integer B. Return the of count of distinct numbers in all windows of size B.

Formally, return an array of size N-B+1 where i'th element in this array contains number of distinct elements in sequence Ai, Ai+1 ,..., Ai+B-1.

NOTE: if B > N, return an empty array.



Problem Constraints
1 <= N <= 106
1 <= A[i] <= 109

Input Format:
First argument is an integer array A
Second argument is an integer B.

Output Format:
Return an integer array.

Example Input:
Input 1:
 A = [1, 2, 1, 3, 4, 3]
 B = 3
Input 2:
 A = [1, 1, 2, 2]
 B = 1

Example Output:
Output 1:
 [2, 3, 3, 2]
Output 2:
 [1, 1, 1, 1]


Example Explanation
Explanation 1:
 A=[1, 2, 1, 3, 4, 3] and B = 3
 All windows of size B are
 [1, 2, 1]
 [2, 1, 3]
 [1, 3, 4]
 [3, 4, 3]
 So, we return an array [2, 3, 3, 2].
Explanation 2:
 Window size is 1, so the output array is [1, 1, 1, 1].

 ==================================================================================================================================================================================
A = [1, 2, 1, 3, 4, 3]; //[ 2, 3, 3, 2 ]
B = 3;
let ans = dNums(A, B);
console.log(ans);

function dNums(A, B) {
  let n = A.length;
  let k = B;
  let hm = new Map();
  let ans = [];
  // first window
  for (let i = 0; i < k; i++) {
    if (hm.has(A[i])) {
      hm.set(A[i], hm.get(A[i]) + 1);
    } else {
      hm.set(A[i], 1);
    }
  }
  ans.push(hm.size);
  let s = 1;
  let e = k;
  while (e < n) {
    // A[s-1] is going out
    hm.set(A[s - 1], hm.get(A[s - 1]) - 1);
    if (hm.get(A[s - 1]) == 0) {
      hm.delete(A[s - 1]);
    }
    // A[e] is coming in.
    if (hm.has(A[e])) {
      hm.set(A[e], hm.get(A[e]) + 1);
    } else {
      hm.set(A[e], 1);
    }
    ans.push(hm.size);
    s++;
    e++;
  }
  return ans;
}



====================================================================================================================================================================================
