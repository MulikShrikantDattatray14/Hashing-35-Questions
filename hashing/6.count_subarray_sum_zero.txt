Problem Description:

Given an array A of N integers.
Find the count of the subarrays in the array which sums to zero. Since the answer can be very large, return the remainder on dividing the result with 109+7

Problem Constraints:
1 <= N <= 105
-109 <= A[i] <= 109

Input Format:

Single argument which is an integer array A.

Output Format:

Return an integer.

Example Input:

Input 1:
 A = [1, -1, -2, 2]
Input 2:
 A = [-1, 2, -1]


Example Output : 
Output 1:
3
Output 2:
1

Example Explanation:
Explanation 1:
 The subarrays with zero sum are [1, -1], [-2, 2] and [1, -1, -2, 2].
Explanation 2:
 The subarray with zero sum is [-1, 2, -1].

 =============================================================================================================================================================================================================================================================================================================================================

// way -1 : 
function numSubarraysWithSum(nums, goal) {
  let res = 0;
  let curr = 0;
  const map = new Map();
  map.set(0, 1); // to handle 1-1 =0 , but there is no 0 in the map , so set it first only

  for (let i = 0; i < nums.length; i++) {
    curr += nums[i];

    if (map.has(curr - goal)) {
      res += map.get(curr - goal);
    }

    if (map.has(curr)) {
      map.set(curr, map.get(curr) + 1);
    } else {
      map.set(curr, 1);
    }
  }

  return res;
}

let nums = [1, -1, -2, 2]
let goal = 0;
let ans = numSubarraysWithSum(nums, goal);
console.log(ans);

======================================================================================================================================================================================
// way-2 : 

let A = [1, -1, -2, 2];

let count = 0;
const mod = 1000000007;
const map = new Map();
const ps = new Array(A.length);
// step-1 : count all the zeros in the prefix sum array
ps[0] = A[0];
if (ps[0] === 0) {
  count++;
}
for (let i = 1; i < A.length; i++) {
  ps[i] = (A[i] + (ps[i - 1] % mod)) % mod;
  if (ps[i] === 0) {
    count++;
  }
}
// step-2 : start counting the repeatiton in the prefix sum subarray.
for (let i = 0; i < ps.length; i++) {
  if (map.has(ps[i])) {
    count = count + map.get(ps[i]);
    map.set(ps[i], map.get(ps[i]) + 1);
  } else {
    map.set(ps[i], 1);
  }
}
console.log(count);


======================================================================================================================================================================================
