Problem Description :-

You are given two strings, A and B, of size N and M, respectively.
You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.

Problem Constraints:-
1 <= N < M <= 10^5

Input Format:-
Given two arguments, A and B of type String.

Output Format:-
Return a single integer, i.e., number of permutations of A present in B as a substring.

Example Input
Input 1:
 A = "abc"
 B = "abcbacabc"
Input 2:
 A = "aca"
 B = "acaa"


Example Output:
Output 1:
 5
Output 2:
 2


Example Explanation
Explanation 1:
 Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
Explanation 2:
 Permutations of A that are present in B as substring are:
    1. aca
    2. caa 

    ==================================================================================

function countPermutations(A, B) {
  const n = A.length;
  const m = B.length;
  const hash1 = Array(26).fill(0);
  const hash2 = Array(26).fill(0);
  const aCode = "a".charCodeAt(0);
  // for 1st n length
  for (let i = 0; i < n; i++) {
    hash1[A.charCodeAt(i) - aCode]++;
    hash2[B.charCodeAt(i) - aCode]++;
  }

  let count = 0;
  // for the remaining windows-slide towards right
  for (let i = 0; i <= m - n; i++) {
    if (arePermutations(hash1, hash2)) count++;
    hash2[B.charCodeAt(i + n) - aCode]++;
    hash2[B.charCodeAt(i) - aCode]--;
  }

  return count;
}

function arePermutations(hash1, hash2) {
  for (let i = 0; i < 26; i++) {
    if (hash1[i] !== hash2[i]) return false;
  }
  return true;
}
A = "abc";
B = "abcbacabc";
let ans = countPermutations(A, B);
console.log(ans);


=====================================================================================