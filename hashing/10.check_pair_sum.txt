Problem Description:
Given an Array of integers B, and a target sum A.
Check if there exists a pair (i,j) such that Bi + Bj = A and i!=j.


Problem Constraints:
1 <= Length of array B <= 105
0 <= Bi <= 109
0 <= A <= 109


Input Format:
First argument A is the Target sum, and second argument is the array B


Output Format:
Return an integer value 1 if there exists such pair, else return 0.


Example Input
Input 1:

A = 8   
B = [3, 5, 1, 2, 1, 2]
Input 2:

A = 21   
B = [9, 10, 7, 10, 9, 1, 5, 1, 5]


Example Output:

Output 1:
1
Output 2:
0


Example Explanation
Example 1:
It is possible to obtain sum 8 using 3 and 5.
Example 2:
There is no such pair exists.

=========================================================================================

 1) using hashset : 
 -------------------

function pairsum(A, B) {
  const set = new Set();
  for (let i = 0; i < B.length; i++) {
    if (set.has(A - B[i])) {
      return 1;
    }
    set.add(B[i]);
  }
  return 0;
}

let A = 8;
let B = [3, 5, 1, 2, 1, 2];
let ans = pairsum(A, B);
console.log(ans);


 ====================================================================================================
2) using hashmap : 
==================
let A = 8;
let B = [3, 5, 1, 2, 1, 2];
let ans = solve(A, B);
console.log(ans);
function solve(A, B) {
  let n = B.length;
  let m = new Map();
  for (let i = 0; i < n; i++) {
    if (m.has(B[i])) {
      m.set(B[i], m.get(B[i]) + 1);
    } else {
      m.set(B[i], 1);
    }
  }

  for (let i = 0; i < n; i++) {
    let a = parseInt(B[i]);
    let b = A - a;

    if (a != b) {
      if (m.has(b)) return 1;
    } else if (a == b) {
      if (m.get(b) > 1) return 1;
    }
  }
  return 0;
}

  ====================================================================================================