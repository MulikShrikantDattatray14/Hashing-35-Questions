Problem Description:-

Determine the "GOOD"ness of a given string A, where the "GOOD"ness is defined by the length of the longest substring that contains no repeating characters. The greater the length of this unique-character substring, the higher the "GOOD"ness of the string.

Your task is to return an integer representing the "GOOD"ness of string A.
Note: The solution should be achieved in O(N) time complexity, where N is the length of the string.

Problem Constraints:
1 <= size(A) <= 106

String consists of lowerCase,upperCase characters and digits are also present in the string A.

Input Format:
Single Argument representing string A.

Output Format:
Return an integer denoting the maximum possible length of substring without repeating characters.



Example Input
Input 1:
 A = "abcabcbb"
Input 2:
 A = "AaaA"


Example Output
Output 1:
 3
Output 2:
 2


Example Explanation:
Explanation 1:

 Substring "abc" is the longest substring without repeating characters in string A.
Explanation 2:

 Substring "Aa" or "aA" is the longest substring without repeating characters in string A.


================================================================================================================================================================================

A = "abcabcbb";
//https://www.youtube.com/watch?v=T-Oj2Ajj9vA
let s = A; // Provide your string here
let dict = new Array(256).fill(-1);// ASCII codes  are till 256
let maxlen = 0;
let start = -1;
//always keep start behind the i;
for (let i = 0; i < s.length; i++) {
  if (dict[s.charCodeAt(i)] > start) {
    start = dict[s.charCodeAt(i)];
  }
  dict[s.charCodeAt(i)] = i;
  maxlen = Math.max(maxlen, i - start);
}

console.log(maxlen);


================================================================================================================================================================================