Problem Description:

Given an array of integers A, find and return whether the given array contains a non-empty subarray with a sum equal to 0.
If the given array contains a sub-array with sum zero return 1, else return 0.

Problem Constraints:
1 <= |A| <= 100000
-10^9 <= A[i] <= 10^9

Input Format:
The only argument given is the integer array A.

Output Format:
Return whether the given array contains a subarray with a sum equal to 0.


======================================================================================================================================================================
Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
Input 2:

 A = [4, -1, 1]


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 No subarray has sum 0.
Explanation 2:

 The subarray [-1, 1] has sum 0.

 ====================================================================================================================================================================

A = [4, -1, 1];
let ans = sumzero(A);
if (ans) console.log("Array contains the subarray with a sum equals to zero");
else {
  console.log("Array doesnot contains the subarray with a sum equals to zero");
}

function sumzero(A) {
  let n = A.length;
  let pf = [];
  pf[0] = A[0];
  for (let i = 1; i < n; i++) {
    pf[i] = pf[i - 1] + A[i];
  }
  // zero or repeatition of any number in the prefixsum array  is a identication of presence of the subarray with sum zero.
  for (let i = 0; i < n; i++) {
    if (pf[i] == 0) {
      return 1;
    }
  }
  const mySet1 = new Set(pf);
  if (mySet1.size == n) return 0;
  return 1; // presence of duplicate in the prefix sum
}


//======================================================================================================================================================================
A = [4, -1, 1];
let ans1 = sumzero(A);
console.log(ans1);
function sumzero(A) {
  let n = A.length;
  let pf = [];
  pf[0] = A[0];
  for (let i = 1; i < n; i++) {
    pf[i] = pf[i - 1] + A[i];
  }
  let m = new Map();
  for (let i = 0; i < n; i++) {
    if (pf[i] == 0) return 1;
    if (m.has(pf[i])) {
      return 1;
    } else {
      m.set(pf[i], 1);
    }
  }

  return 0;
}


======================================================================================================================================================================

